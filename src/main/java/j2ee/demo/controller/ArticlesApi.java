/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package j2ee.demo.controller;

import j2ee.demo.model.Article;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-10T17:01:42.314Z[GMT]")

@Api(value = "articles", description = "the articles API")
public interface ArticlesApi {

    @ApiOperation(value = "删除分享", nickname = "articlesArticleIdDelete", notes = "", tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "动态删除成功"),
        @ApiResponse(code = 404, message = "某个分享不存在") })
    @RequestMapping(value = "/articles/{ArticleId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> articlesArticleIdDelete(@ApiParam(value = "",required=true) @PathVariable("ArticleId") Integer articleId);


    @ApiOperation(value = "取消点赞", nickname = "articlesArticleIdLikesUserIdDelete", notes = "", tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "点赞取消成功"),
        @ApiResponse(code = 404, message = "某个用户或分享不存在") })
    @RequestMapping(value = "/articles/{ArticleId}/likes/{UserId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> articlesArticleIdLikesUserIdDelete(@ApiParam(value = "",required=true) @PathVariable("ArticleId") Integer articleId,@ApiParam(value = "",required=true) @PathVariable("UserId") Integer userId);


    @ApiOperation(value = "点赞", nickname = "articlesArticleIdLikesUserIdPost", notes = "", tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "关注成功"),
        @ApiResponse(code = 404, message = "某个用户或分享不存在"),
        @ApiResponse(code = 409, message = "你已经关注了这篇分享...") })
    @RequestMapping(value = "/articles/{ArticleId}/likes/{UserId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> articlesArticleIdLikesUserIdPost(@ApiParam(value = "",required=true) @PathVariable("ArticleId") Integer articleId,@ApiParam(value = "",required=true) @PathVariable("UserId") Integer userId);


    @ApiOperation(value = "用户发表分享", nickname = "articlesPost", notes = "", response = Article.class, tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Post article successfully.", response = Article.class) })
    @RequestMapping(value = "/articles",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Article> articlesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Article body);


    @ApiOperation(value = "修改用户信息", nickname = "articlesPut", notes = "", response = Article.class, tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功修改分享", response = Article.class) })
    @RequestMapping(value = "/articles",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Article> articlesPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Article body);


    @ApiOperation(value = "获得用户首页分享", nickname = "articlesUserIdGet", notes = "", response = Article.class, responseContainer = "List", tags={ "article", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功找到首页分享", response = Article.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "用户不存在") })
    @RequestMapping(value = "/articles/{UserId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Article>> articlesUserIdGet(@ApiParam(value = "",required=true) @PathVariable("UserId") Integer userId);

}
