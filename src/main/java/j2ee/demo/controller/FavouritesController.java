/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package j2ee.demo.controller;

import com.google.gson.JsonObject;
import j2ee.demo.authorization.annotation.Authorization;
import j2ee.demo.model.*;
import io.swagger.annotations.*;
import j2ee.demo.service.FavouritesService;
import j2ee.demo.service.MomentsService;
import j2ee.demo.service.UsersService;
import j2ee.demo.service.WebSocketService;
import j2ee.demo.utils.CorrectResult;
import j2ee.demo.utils.ErrorResult;
import j2ee.demo.utils.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-10T17:01:42.314Z[GMT]")

@CrossOrigin("*")
@Api(value = "favourites", description = "the favourites API")
@RestController
public class FavouritesController {
    @Autowired
    private FavouritesService favouritesService;

    @Autowired
    private MomentsService momentsService;

    @Autowired
    private UsersService usersService;

    @Autowired
    private WebSocketService webSocketService;

    @ApiOperation(value = "删除收藏夹", nickname = "favouritesUserIdDelete", notes = "", response = Favourites.class, tags = {"favourite",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功删除收藏夹", response = Favourites.class),
            @ApiResponse(code = 409, message = "收藏夹名字冲突")})
//    @Authorization
    @RequestMapping(value = "/favourites/{UserId}/{FavouritesId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    public ResponseEntity<Object>  favouritesUserIdDelete(@ApiParam(value = "", required = true) @PathVariable("UserId") Integer userId, @PathVariable("FavouritesId") Integer favouritesId) {
        favouritesService.deleteFavourite(userId, favouritesId);
//        return new Response(200, "Success");
        return new ResponseEntity<>(new CorrectResult("Success"), HttpStatus.OK);
    }


    @ApiOperation(value = "创建收藏夹", nickname = "favouritesUserIdPost", notes = "", response = Favourites.class, tags = {"favourite",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功创建收藏夹", response = Favourites.class),
            @ApiResponse(code = 409, message = "收藏夹名字冲突")})
//    @Authorization
    @RequestMapping(value = "/favourites/{UserId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    public ResponseEntity<Object>  favouritesUserIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody Favourites body, @ApiParam(value = "", required = true) @PathVariable("UserId") Integer userId) {
        Favourites favourites = favouritesService.findByName(body.getName());
        if (favourites != null) {
            return new ResponseEntity<>(new ErrorResult("收藏夹名字冲突"), HttpStatus.CONFLICT);
        }
        favouritesService.addFavourite(userId, body);
//        return new Response(201, "Success");
        JsonObject favDto = new JsonObject();
        favDto.addProperty("Id", body.getId());
        favDto.addProperty("Creator", body.getCreator());
        favDto.addProperty("Name", body.getName());
        return new ResponseEntity<>(favDto.toString(), HttpStatus.OK);
    }

    @ApiOperation(value = "将动态添加至收藏夹", nickname = "favouritesMomentPost", notes = "", tags = {"favourite",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功添加至收藏夹", response = FavouritesMoment.class)})
//    @Authorization
    @RequestMapping(value = "/favourites/{FavId}/moments/{MomentId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    public ResponseEntity<Object>  favouritesMomentPost(@ApiParam(value = "", required = true) @PathVariable("FavId") Integer favId, @ApiParam(value = "", required = true) @PathVariable("MomentId") Integer momentId) {
        FavouritesMoment favouritesMoment = new FavouritesMoment(favId, momentId);
        favouritesService.addMomentToFavourites(favouritesMoment);

        Moment moment = momentsService.findByMomentId(momentId);
        Favourites favourites = favouritesService.findByFavId(favId);
        User user = usersService.getUser(favourites.getCreator());
        String result = user.getUsername() + "收藏了你的分享！";
        webSocketService.send2User(moment.getCreator(), new WiselyResponse(result));

//        return new Response(201, "Success");
        JsonObject favDto = new JsonObject();
        favDto.addProperty("Id", favouritesMoment.getId());
        favDto.addProperty("FavouritesId", favouritesMoment.getFavouritesId());
        favDto.addProperty("MomentId", favouritesMoment.getMomentId());
        return new ResponseEntity<>(favDto.toString(), HttpStatus.OK);
    }

    @ApiOperation(value = "将动态从收藏夹中移除", nickname = "favouritesMomentDelete", notes = "", tags = {"favourite",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "成功移除")})
//    @Authorization
    @RequestMapping(value = "/favourites/{FavId}/moments/{MomentId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.DELETE)
    public ResponseEntity<Object>  favouritesMomentDelete(@ApiParam(value = "", required = true) @PathVariable("FavId") Integer favId, @ApiParam(value = "", required = true) @PathVariable("MomentId") Integer momentId) {
        favouritesService.deleteFavouritesMoment(favId, momentId);
//        return new Response(201, "Success");
        return new ResponseEntity<>(new CorrectResult("成功移除"), HttpStatus.OK);
    }

    @ApiOperation(value = "将动态移动到另一收藏夹", nickname = "favouritesMomentPut", notes = "", tags = {"favourite",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "成功移动至新收藏夹", response = FavouritesMoment.class)})
//    @Authorization
    @RequestMapping(value = "/favourites/moments/{FavId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    public ResponseEntity<Object>  favouritesMomentPut(@ApiParam(value = "", required = true)@Valid @RequestBody FavouritesMoment favouritesMoment, @ApiParam(value = "", required = true) @PathVariable("FavId") Integer favId) {
        favouritesService.moveToFavourites(favouritesMoment.getId(), favId);
//        return new Response(201, "Success");
        return new ResponseEntity<>(new CorrectResult("成功移动至新收藏夹"), HttpStatus.OK);
    }

}
