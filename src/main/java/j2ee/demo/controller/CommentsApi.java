/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package j2ee.demo.controller;

import j2ee.demo.model.MomentComment;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-10T17:01:42.314Z[GMT]")

@Api(value = "comments", description = "the comments API")
public interface CommentsApi {

    @ApiOperation(value = "", nickname = "commentsCommentIdDelete", notes = "删除一个收藏夹", tags={ "comment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "取消关注成功") })
    @RequestMapping(value = "/comments/{CommentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> commentsCommentIdDelete(@ApiParam(value = "",required=true) @PathVariable("CommentId") Integer commentId);


    @ApiOperation(value = "查看评论", nickname = "commentsCommentIdGet", notes = "", response = MomentComment.class, tags={ "comment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功返回评论", response = MomentComment.class) })
    @RequestMapping(value = "/comments/{CommentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MomentComment> commentsCommentIdGet(@ApiParam(value = "",required=true) @PathVariable("CommentId") Integer commentId);


    @ApiOperation(value = "", nickname = "commentsCommentIdPut", notes = "修改评论", response = MomentComment.class, tags={ "comment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Post comment successfully.", response = MomentComment.class),
        @ApiResponse(code = 409, message = "收藏夹名字冲突") })
    @RequestMapping(value = "/comments/{CommentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<MomentComment> commentsCommentIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody MomentComment body,@ApiParam(value = "",required=true) @PathVariable("CommentId") Integer commentId);


    @ApiOperation(value = "用户发表评论", nickname = "commentsPost", notes = "", response = MomentComment.class, tags={ "comment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Post comment successfully.", response = MomentComment.class) })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MomentComment> commentsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody MomentComment body);

}
